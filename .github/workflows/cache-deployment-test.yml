name: Test docker build with cache

on:
  push:
    branches:
      - feat/C2V1-010
    #   - main

permissions:
  id-token: write
  contents: write

concurrency:
  group: ${{ github.workflow }}

jobs:
#   update_tag:
#     runs-on: ubuntu-latest
#     outputs:
#       NEW_TAG: ${{ steps.create_tag.outputs.NEW_TAG }}
#       BRANCH: ${{ env.BRANCH_NAME }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           token: ${{ secrets.ACTIONS_TOKEN }}

#       - name: Determine branch name
#         id: determine-branch-name
#         run: echo "BRANCH_NAME=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

#       - name: PR merged in main
#         id: main_versioning
#         if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
#         uses: paulhatch/semantic-version@v5.0.3
#         with:
#           tag_prefix: ""
#           major_pattern: "BREAKING CHANGE:"
#           minor_pattern: "feat:"
#           version_format: "${major}.${minor}.${patch}"
        
#       - name: PR merged in development
#         id: development_versioning
#         if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'development' }}
#         uses: paulhatch/semantic-version@v5.0.3
#         with:
#           tag_prefix: ""
#           major_pattern: "BREAKING CHANGE:"
#           minor_pattern: "feat:"
#           version_format: "${major}.${minor}.${patch}-RC.${increment}"
          
#       - name: Create version tag
#         id: create_tag
#         if: ${{ github.event.pull_request.merged == true }}
#         run: |
#           git config --local user.email "stanyhelberth@gmail.com"
#           git config --local user.name "Collec_CICD" 
#           if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then 
#             echo "NEW_TAG=$(echo ${{ steps.main_versioning.outputs.version }})" >> $GITHUB_OUTPUT
#             git tag -a ${{ steps.main_versioning.outputs.version }} -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: ${{ steps.main_versioning.outputs.version }}"
#             git push origin ${{ steps.main_versioning.outputs.version }}
#           elif [[ "${{ env.BRANCH_NAME }}" == "development" ]]; then
#             echo "NEW_TAG=$(echo ${{ steps.development_versioning.outputs.version }})" >> $GITHUB_OUTPUT
#             # NEW_TAG=$(./sum_increment.sh ${{ steps.development_versioning.outputs.increment }} ${{ steps.development_versioning.outputs.version }})
#             echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT 
#             git tag -a ${{ steps.development_versioning.outputs.version }} -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: ${{ steps.development_versioning.outputs.version }}"
#             git push origin ${{ steps.development_versioning.outputs.version }}
#           fi

#   manage_tags:
#     runs-on: ubuntu-latest
#     needs: update_tag
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           ref: ${{ github.event.pull_request.base.ref }}

#       - name: Limit tags for development branch
#         if: github.event.pull_request.base.ref == 'development'
#         run: |
#           git tag --sort=-creatordate | grep RC | tail -n +11 | xargs -I{} git push --delete origin {}

#       - name: Limit tags for main branch
#         if: github.event.pull_request.base.ref == 'main'
#         run: |
#           git tag --sort=-creatordate | grep -v RC | tail -n +6 | xargs -I{} git push --delete origin {}
  
  deploy:
    runs-on: ubuntu-latest
    # needs: [manage_tags, update_tag]
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: collection-api
    #   ECS_SERVICE: collection-ecs-service
    #   ECS_CLUSTER: collection-ecs-cluster
    #   ECS_TASK_DEFINITION: .aws/task-definition
    #   CONTAINER_NAME: collection-api
      TAG: 2.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Set service name
    #     id: service_name
    #     run: |
    #       if [[ "${{ needs.update_tag.outputs.BRANCH }}" == "main" ]]; then
    #         echo "SERVICE_NAME=${{ env.ECS_SERVICE }}-prod" >> $GITHUB_ENV
    #       elif [[ "${{ needs.update_tag.outputs.BRANCH }}" == "development" ]]; then
    #         echo "SERVICE_NAME=${{ env.ECS_SERVICE }}-dev" >> $GITHUB_ENV
    #       fi

    #   - name: Set task definitions full path
    #     id: task_definitions_path
    #     run: |
    #       if [[ "${{ needs.update_tag.outputs.BRANCH }}" == "main" ]]; then
    #         echo "TASK_DEFINITION_PATH=${{ env.ECS_TASK_DEFINITION }}-prod.json" >> $GITHUB_ENV
    #       elif [[ "${{ needs.update_tag.outputs.BRANCH }}" == "development" ]]; then
    #         echo "TASK_DEFINITION_PATH=${{ env.ECS_TASK_DEFINITION }}-dev.json" >> $GITHUB_ENV
    #       fi

    #   - name: Set container name
    #     id: container_name
    #     run: |
    #       if [[ "${{ needs.update_tag.outputs.BRANCH }}" == "main" ]]; then
    #         echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}-prod" >> $GITHUB_ENV
    #       elif [[ "${{ needs.update_tag.outputs.BRANCH }}" == "development" ]]; then
    #         echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}-dev" >> $GITHUB_ENV
    #       fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.OIDC_AWS_GITHUB }}
          role-session-name: ECR-ECS-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
    #   - name: Build, tag, and push image to Amazon ECR
    #     id: build-image
    #     env:
    #     #   TAG: ${{ needs.update_tag.outputs.NEW_TAG }}
    #     #   BRANCH: ${{ needs.update_tag.outputs.BRANCH }}
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     run: |
    #       echo ${{ env.TAG }}
    #       echo Build started on `date`
    #       echo Building the Docker image...
    #       docker build -t collection-api .
    #       docker tag collection-api $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.TAG }}-test
    #       echo Build completed on `date`
    #       echo Pushing the Docker image...
    #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.TAG }}-test
    #       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.TAG }}-test" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        env: 
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            image: ${{ steps.build-image.outputs.image }}
        with:
            context: .
            push: true
            tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}-test
            # outputs: type=docker, dest=./builded_image.tar
            cache-from: type=gha
            cache-to: type=gha,mode=max
        
      - name: Export image to GITHUB OUTPUT
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.TAG }}-test" >> $GITHUB_OUTPUT
        
    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ env.TASK_DEFINITION_PATH }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}-test
          # image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.SERVICE_NAME }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true
