name: Update tag and deploy image

on:
  pull_request:
    types: closed
    branches:
      - development
      - main

jobs:
  update_tag:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
    outputs:
      NEW_TAG: ${{ steps.create_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine branch name
        id: determine-branch-name
        run: echo "BRANCH_NAME=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: PR merged in main
        id: main_versioning
        if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
        uses: paulhatch/semantic-version@v5.0.2
        with:
          tag_prefix: ""
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
        
      - name: PR merged in development
        id: development_versioning
        if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'development' }}
        uses: paulhatch/semantic-version@v5.0.2
        with:
          tag_prefix: ""
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}-RC.${increment}"
          
      - name: Create version tag
        id: create_tag
        if: ${{ github.event.pull_request.merged == true }}
        run: |
          git config --local user.email "stanyhelberth@gmail.com"
          git config --local user.name "Collec_CICD"
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "NEW_TAG=$(echo ${{ steps.main_versioning.outputs.version }})" >> $GITHUB_OUTPUT
            git tag -a ${{ steps.main_versioning.outputs.version }} -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: ${{ steps.main_versioning.outputs.version }}"
            git push origin ${{ steps.main_versioning.outputs.version }}
          elif [[ "${{ env.BRANCH_NAME }}" == "development" ]]; then
            NEW_TAG=$(./sum_increment.sh ${{ steps.development_versioning.outputs.increment }} ${{ steps.development_versioning.outputs.version }})
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
            git tag -a $NEW_TAG -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: $NEW_TAG"
            git push origin $NEW_TAG
          fi
          
      - name: Check tags number
        id: tags
        run: |
          tags_count=$(git tag --sort=-creatordate | wc -l)
          echo "tag_count=$tags_count" >> $GITHUB_OUTPUT

      - name: Filter tags
        id: filtered_tags
        if: ${{ steps.tags.outputs.tag_count > 10 }}
        run: |
          all_tags=$(git tag --sort=-creatordate)
          non_rc_tags=$(echo "$all_tags" | grep -vE "\-RC\.[0-9]+")
          latest_tags=$(echo "$non_rc_tags" | head -n 10)
          echo "latest_tags=$latest_tags" >> $GITHUB_OUTPUT

      - name: Clean old tags
        if: ${{ steps.tags.outputs.tag_count > 10 }}
        run: |
          old_tags=$(echo "${{ steps.filtered_tags.outputs.latest_tags }}" | tail -n +11)
          echo "$old_tags" | xargs -I{} git push --delete origin {}

  # build_and_deploy:
  #   runs-on: ubuntu-latest
  #   needs: update_tag
  #   env:
  #     NEW_TAG: ${{ needs.update_tag.outputs.NEW_TAG }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Docker Login
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Docker Setup Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/collection-dev-api:${{ env.NEW_TAG }}