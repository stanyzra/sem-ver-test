name: Update tag and deploy image

on:
  pull_request:
    types: closed
    branches:
      - development
      - main

jobs:
  update_tag:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
    outputs:
      NEW_TAG: ${{ steps.create_tag.outputs.NEW_TAG }}
      BRANCH: ${{ env.BRANCH_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine branch name
        id: determine-branch-name
        run: echo "BRANCH_NAME=$(echo $GITHUB_REF | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: PR merged in main
        id: main_versioning
        if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
        uses: paulhatch/semantic-version@v5.0.3
        with:
          tag_prefix: ""
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
        
      - name: PR merged in development
        id: development_versioning
        if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'development' }}
        uses: paulhatch/semantic-version@v5.0.3
        with:
          tag_prefix: ""
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}-RC.${increment}"
          
      - name: Create version tag
        id: create_tag
        if: ${{ github.event.pull_request.merged == true }}
        run: |
          git config --local user.email "stanyhelberth@gmail.com"
          git config --local user.name "Collec_CICD"
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "NEW_TAG=$(echo ${{ steps.main_versioning.outputs.version }})" >> $GITHUB_OUTPUT
            git tag -a ${{ steps.main_versioning.outputs.version }} -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: ${{ steps.main_versioning.outputs.version }}"
            git push origin ${{ steps.main_versioning.outputs.version }}
          elif [[ "${{ env.BRANCH_NAME }}" == "development" ]]; then
            NEW_TAG=$(./sum_increment.sh ${{ steps.development_versioning.outputs.increment }} ${{ steps.development_versioning.outputs.version }})
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
            git tag -a $NEW_TAG -m "New Version from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}: $NEW_TAG"
            git push origin $NEW_TAG
          fi

  manage_tags:
    runs-on: ubuntu-latest
    needs: update_tag
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Limit tags for development branch
        if: github.event.pull_request.base.ref == 'development'
        run: |
          git tag --sort=-creatordate | grep RC | tail -n +11 | xargs -I{} git push --delete origin {}

      - name: Limit tags for main branch
        if: github.event.pull_request.base.ref == 'main'
        run: |
          git tag --sort=-creatordate | grep -v RC | tail -n +6 | xargs -I{} git push --delete origin {}
  
  build_and_push:
    
    runs-on: ubuntu-latest
    needs: [manage_tags, update_tag]
    env:
      AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
      ECR_REPOSITORY: collection-docker-images           # set this to your Amazon ECR repository name
      # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
      # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
      # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
      #                                           # file, e.g. .aws/task-definition.json
      # CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/git-actions-role
          # role-session-name: ECR-ECS-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          TAG: ${{ needs.update_tag.outputs.NEW_TAG }}
          BRANCH: ${{ needs.update_tag.outputs.BRANCH }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo Build started on `date`
          echo Building the Docker image...
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG .
          echo Build completed on `date`
          echo Pushing the Docker image...
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG" >> $GITHUB_OUTPUT
